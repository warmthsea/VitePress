import{_ as l,o as i,c as a,O as e}from"./chunks/framework.0bc17605.js";const m=JSON.parse('{"title":"第七章 多处理机","description":"","frontmatter":{},"headers":[],"relativePath":"computer/seven.md","filePath":"computer/seven.md","lastUpdated":1663683723000}'),o={name:"computer/seven.md"},t=e('<h1 id="第七章-多处理机" tabindex="-1">第七章 多处理机 <a class="header-anchor" href="#第七章-多处理机" aria-label="Permalink to &quot;第七章 多处理机&quot;">​</a></h1><h2 id="一、-多处理机的概念、问题和硬件结构" tabindex="-1">一、 多处理机的概念、问题和硬件结构 <a class="header-anchor" href="#一、-多处理机的概念、问题和硬件结构" aria-label="Permalink to &quot;一、 多处理机的概念、问题和硬件结构&quot;">​</a></h2><p>1、多处理机的基本概念和要解决的技术问题</p><ul><li><code>多处理机的基本概念</code> ★ <ul><li>多处理机是指两台以上的处理机，共享I/O系统，机间经共享主存或告诉通信网络通信，在统一的系统控制下，协同求解大而复杂的计算机系统。</li></ul></li><li>多处理机的目标 <ul><li>1）对多个作业、多个任务并执行来提高解题速度，从而提高整体性能；</li><li>2）使用冗余的多个处理机通过重新组织来提高系统的可靠性、适应性和可用性。</li></ul></li><li>多处理机的特点 <ul><li>1）结构灵活性</li><li>2）程序并行性</li><li>3）并行任务派生</li><li>4）进程同步</li><li>2）资源分配和任务调整</li></ul></li><li>需要解决的主要问题 <ul><li>1）硬件结构上如何解决好处理机、 存贮器模块及I/O子系统之间的互连。</li><li>2）如何最大限度地开发系统的并行性， 以实现多处理机各级的全面并行。</li><li>3）如何选择分割任务和子任务的大小， 即任务的粒度大小， 使并行度高， 而辅助开销小。</li><li>4）如何协调好多处理机中各并行执行的任务和进程间的同步问题。</li><li>5）如何将各个任务分配到一个或多个处理机上， 解决好处理机调度、任务调度和资源分配问题， 防止死锁。</li><li>6）一旦某个处理机发生故障，如何对系统进行重新组织而不使其瘫痪。</li></ul></li></ul><p>2、多处理机的硬件结构</p><ul><li>紧耦合和松耦合 <ul><li>1)紧耦合多处理机</li><li>2)松耦合多处理机</li></ul></li></ul><p>3、<code>机间互联形式</code></p><ul><li><ol><li>总线形式</li></ol></li><li><ol start="2"><li>环形互联</li></ol></li><li><ol start="3"><li>交叉开关形式</li></ol></li><li><ol start="4"><li>多端口存储器形式</li></ol></li><li><ol start="5"><li>蠕虫穿洞寻经网络</li></ol></li><li><ol start="6"><li>开关枢纽结构形式</li></ol></li></ul><p>4、存储器的构成</p><ul><li><ol><li>低址交叉</li></ol></li><li><ol start="2"><li>高址交叉</li></ol></li></ul><h2 id="二、紧耦合多处理机多cache的一致性" tabindex="-1">二、紧耦合多处理机多Cache的一致性 <a class="header-anchor" href="#二、紧耦合多处理机多cache的一致性" aria-label="Permalink to &quot;二、紧耦合多处理机多Cache的一致性&quot;">​</a></h2><p>1、多Cache的一致性问题的产生</p><ul><li>多处理机中，由于没干处理机都有自己专用的Cache，当主存中同一信息块在多个Cache中都有时，会出现多个Cache之间的相应信息块的内容不一致的问题。</li></ul><p>2、多Cache的一致性问题的解决办法：</p><ul><li><ol><li>一类是解决进程迁移引起的多Cache不一致性；</li></ol></li><li><ol start="2"><li>二类是以硬件为基础的做法；</li></ol></li><li><ol start="3"><li>主要是以软件为基础的做法</li></ol></li></ul><h2 id="三、多处理机的并行性和性能" tabindex="-1">三、多处理机的并行性和性能 <a class="header-anchor" href="#三、多处理机的并行性和性能" aria-label="Permalink to &quot;三、多处理机的并行性和性能&quot;">​</a></h2><p>1、并行算法</p><ul><li><p>并行算法的定义和分类</p><ul><li>可同时执行的多个进程的集合，各进程可相互作用、协调和并发操作。</li></ul></li><li><p>并行算法的分类</p><ul><li>1）按运算对象：数值型和非数值型；</li><li>2）按并行进程的操作顺序：同步、异步和独立型；</li><li>3）按处理计算机任务大小：细粒度、中粒度和粗粒度；</li></ul></li><li><p>多处理机并行算法的研究思路</p><ul><li><ol><li>将大的应用程序分解成由足够多的并行处理的过程</li></ol></li><li>2）每个过程被看成是一个结点，将过程之间的关联关系用结点组成的树来描述。</li><li><ol start="3"><li>研究程序段之间的并行问题就可设想成是对算术表达式如何并行运算的问难。</li></ol></li></ul></li></ul><p>2、程序并行性的分析</p><ul><li>1）数据相关</li><li>2）数据反相关</li><li>3）数据输出相关</li></ul><p>3、并行语言的并行解释</p><h2 id="四、多处理机的操作系统" tabindex="-1">四、多处理机的操作系统 <a class="header-anchor" href="#四、多处理机的操作系统" aria-label="Permalink to &quot;四、多处理机的操作系统&quot;">​</a></h2><p>1、<code>主从型</code>操作系统 2、<code>各自独立型</code>操作系统 3、<code>浮动型</code>操作系统</p><h2 id="五、多处理机的发展" tabindex="-1">五、多处理机的发展 <a class="header-anchor" href="#五、多处理机的发展" aria-label="Permalink to &quot;五、多处理机的发展&quot;">​</a></h2><p>1、多处理机的发展方向</p><ul><li>1）分布式共享存储器处理机</li><li>2）对称多处理机</li><li>3）多向量处理机</li><li>4）并行向量处理机</li><li>5）大规模并行处理机</li><li>6）机群系统</li></ul>',26),r=[t];function c(u,s,h,d,p,n){return i(),a("div",null,r)}const f=l(o,[["render",c]]);export{m as __pageData,f as default};
