import{_ as l,o as e,c as i,O as o}from"./chunks/framework.0bc17605.js";const q=JSON.parse('{"title":"一、 计算机系统的多级层次结构","description":"","frontmatter":{},"headers":[],"relativePath":"computer/one.md","filePath":"computer/one.md","lastUpdated":1660807898000}'),c={name:"computer/one.md"},d=o('<h1 id="一、-计算机系统的多级层次结构" tabindex="-1">一、 计算机系统的多级层次结构 <a class="header-anchor" href="#一、-计算机系统的多级层次结构" aria-label="Permalink to &quot;一、 计算机系统的多级层次结构&quot;">​</a></h1><h3 id="_1、-计算机系统的层次" tabindex="-1">1、 计算机系统的层次 <a class="header-anchor" href="#_1、-计算机系统的层次" aria-label="Permalink to &quot;1、 计算机系统的层次&quot;">​</a></h3><ul><li>应用语言机器级</li><li>高级语言机器级</li><li>汇编语言机器级</li><li>操作系统机器级</li><li>传统语言机器级</li><li>微程序机器级</li></ul><p>各级程序员在各自机器级实现，不考虑其它机器级</p><p>各级机器的实现采用<strong>翻译或解释技术</strong>来实现</p><h2 id="二、-计算机系统结构、计算机组成和计算机实现" tabindex="-1">二、 计算机系统结构、计算机组成和计算机实现 <a class="header-anchor" href="#二、-计算机系统结构、计算机组成和计算机实现" aria-label="Permalink to &quot;二、 计算机系统结构、计算机组成和计算机实现&quot;">​</a></h2><p>1、计算机系统结构</p><ul><li><p><code>系统结构</code>是对计算机系统中的各级界面的定义及其上下的功能分配</p></li><li><p>对不同机器级的程序员具有<code>透明性</code></p></li><li><p><code>计算机系统结构</code>也称为计算机系统的体系结构</p></li><li><p>计算机系统结构是<code>软件和硬件的交界面</code></p></li></ul><p>2、 计算机组成的定义</p><ul><li><code>计算机组成</code>指的是计算机系统结构的逻辑实现，包括机器级内的数据流和控制流的组成以及逻辑设计等</li><li>计算机组成设计要解决的问题是在所希望达到的性能和价格下，<code>怎样最佳、最合理地把各种设备和部件组织</code>成计算机，以实现所确定的系统结构</li></ul><p>3、计算机实现</p><ul><li>计算机实现指的是<code>计算机组成的物理实现</code>。包括处理机、主存等部件的物理结构，器件的集成度和速度，器件、模块、插件、底板的划分等。</li></ul><p>4、计算机系统结构、组成和实现的相互关系和影响</p><ul><li>相同系统结构，可以有不同的组成；</li><li>一种组成可以有多种不同的实现方法；</li><li>采用不同的系统结构会使可以采用的组成技术产生差异；</li><li>组成也会影响结构。</li></ul><h2 id="三、计算机的软、硬件取舍及定量设计原理" tabindex="-1">三、计算机的软、硬件取舍及定量设计原理 <a class="header-anchor" href="#三、计算机的软、硬件取舍及定量设计原理" aria-label="Permalink to &quot;三、计算机的软、硬件取舍及定量设计原理&quot;">​</a></h2><p>1、软、硬取舍的基本原则</p><ul><li>在<code>现有硬、器件的条件</code>下，系统要有高的<code>性能价格比</code></li><li>要考虑到准备采用和可能采用的组成技术，使它尽可能<code>不要过多或不合理地限制各种组成、实现技术的采用</code>。</li><li>不能仅从&quot;硬&quot;的角度去考虑如何便于应用组成技术的成果和发挥器件技术的进展，还应从&quot;软&quot;的角度把为编译和操作系统的实现，以至高级语言程序的设计提供更多更好的硬件支持放在首位。 <ul><li>（1）提高硬件功能的比例可提高解题速度，减少程序所需的存储空间，但会增加硬件成本，降低硬件利用率和计算机系统的灵活性及适应性。</li><li>（2）提高软件功能的比例可降低硬件成本，提高系统的灵活性、适应性，但解题速度会下降，软件设计费用和所需的存储量将增加。</li></ul></li></ul><p>2、计算机系统的定量设计原理</p><ul><li>哈夫曼（Huffman）压缩原理 <ul><li><code>尽可能加速处理高概率的事件</code>远比加速处理概率低的事件对性能的提高要显著。</li></ul></li><li>Amdahl定律 <ul><li>提高系统的<code>整体性能应是各部分性能均能平衡</code>地得到提高</li></ul></li><li>程序访问的局部性定律 <ul><li>时间上的局限性是指现在正使用的信息可能不久还要使用，因为<code>程序存在着循环</code>；</li><li>空间上的局限性是指最近的将来要用的信息很可能与现在正在使用的信息在程序位置上是邻近的，因为<code>指令通常是顺序存放、顺序执行的</code>。</li></ul></li></ul><p>3、计算机系统设计的主要任务和方法</p><ul><li>计算机系统设计的主要任务 <ul><li><code>系统结构、组成和实现的设计</code>包括软硬件功能分配、计算机指令系统设计、功能组织、逻辑设计、集成电路设计等多方面的问题。</li><li>计算机系统的设计方法 <ul><li><code>&quot;自上而下&quot;</code>的设计：先考虑如何满足应用要求。</li><li><code>&quot;自下而上&quot;</code>的设计：不考虑应用要求，只根据目前能用的器件来设计上层的机器级。</li><li><code>&quot;从中间向两边&quot;</code>的设计：这是目前通用机一般采用的方法。它可以克服&quot;自上而下&quot;和&quot;自下而上&quot;两种设计方法中，软、硬件设计分离和脱节的致命缺点。</li></ul></li></ul></li></ul><p>4、软件、应用、器件的发展对系统结构的影响</p><ul><li>软件 <ul><li><code>软件的可移植性</code>指的是软件不修改或只经少量修改就可由一台机器移到另一台机器上运行，同一软件可应用于不同的环境。</li><li><code>实现软件移植的技术</code>主要有<code>统一高级语言</code>、<code>采用系列机</code>、<code>模拟和仿真</code>。</li></ul></li><li>应用 <ul><li>维持价格，提高性能；维持性能，降低价格。</li></ul></li><li>器件 <ul><li>器件的发展加速了结构的&quot;下移&quot;。大型机的各种数据表示、指令系统、操作系统很快出现在小、微型机上。器件的发展加速了大规模、高性能并行处理机MPP等新系统结构的发展。</li></ul></li></ul><p>5、★系统结构中的并行性开发及计算机系统的分类</p><ul><li>并行性的概念与开发 <ul><li>并行性的含义 ★ <ul><li><code>并行性</code>：（parallelism）是指在同一时刻或是同一时间间隔内完成两种或两种以上性质相同或不相同的工作。</li><li><code>同时性</code>：（simultaneity）是指两个或多个事件在同一时刻发生。</li><li><code>并发性</code>：（concurrency）是指两个或多个事件在同一时间间隔内发生的并行性。</li></ul></li><li>并行的级别 <ul><li>从计算机系统中<code>执行程序的角度</code>来看，<code>并行性等级从低到高可以分为四级</code>。它们分别是：<code>指令内部、指令之间、任务或进程之间、作业或程序之间</code>；</li><li>从计算机系统中<code>处理数据的并行性</code>来看，并行性等级从低到高可以分为：<code>位串字串</code>、<code>位并字串</code>、<code>位片串字并</code>、<code>全并行</code>；</li><li><code>并行性是贯穿于计算机信息加工的各个步骤和阶段的</code>，从这个角度来看，并行性等级又可分为：<code>存贮器操作并行</code>、<code>处理器操作步骤并行</code>、<code>处理器操作并行</code>、<code>指令任务作业并行</code>。</li></ul></li><li>并行的途径 <ul><li>实现并行性的途径有<code>时间重叠</code>、<code>资源重复</code>和<code>资源共享</code>等。</li><li><code>时间重叠</code>（time-interleaving）：在并行性概念中引入时间因素，即多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。</li><li><code>资源重复</code>（resource-replication）：在并行性概念中引入空间因素，通过重复设置硬件资源，可以大幅度提高并行处理能力。</li><li><code>资源共享</code>（Resource Sharing）：它是指多个任务按一定时间顺序轮流使用同一套硬件设备，这样既降低了成本，又提高了计算机设备的利用率。</li></ul></li><li>计算机系统的分类 <ul><li>★<code>Flynn分类法 </code>(弗林) <ul><li>M．J．Flynn教授于1966年美国的提出的 <ul><li>指令流</li><li>数据流</li><li>多倍性</li></ul></li><li>按照<code>指令流</code>和<code>数据流</code>两种不同的组合，把计算机系统的结构分为以下四类 <ul><li><code>单指令流单数据流SISD</code></li><li><code>单指令流多数据流SIMD</code></li><li><code>多指令流单数据流MISD</code></li><li><code>多指令流多数据流MIMD</code></li></ul></li></ul></li></ul></li></ul></li></ul>',25),u=[d];function t(a,r,n,p,s,_){return e(),i("div",null,u)}const m=l(c,[["render",t]]);export{q as __pageData,m as default};
