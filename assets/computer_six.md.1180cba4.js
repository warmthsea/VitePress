import{_ as l,o as i,c as a,O as e}from"./chunks/framework.0bc17605.js";const m=JSON.parse('{"title":"第六章 向量处理机","description":"","frontmatter":{},"headers":[],"relativePath":"computer/six.md","filePath":"computer/six.md","lastUpdated":1663683723000}'),o={name:"computer/six.md"},t=e('<h1 id="第六章-向量处理机" tabindex="-1">第六章 向量处理机 <a class="header-anchor" href="#第六章-向量处理机" aria-label="Permalink to &quot;第六章 向量处理机&quot;">​</a></h1><h2 id="一、-向量的流水处理和向量流水处理机" tabindex="-1">一、 向量的流水处理和向量流水处理机 <a class="header-anchor" href="#一、-向量的流水处理和向量流水处理机" aria-label="Permalink to &quot;一、 向量的流水处理和向量流水处理机&quot;">​</a></h2><p>向量处理机是由向量数据表示的处理机，分<code>向量流水线处理机</code>和<code>阵列处理机</code>两类。向量流水处理机是以时间重叠途径开发的，而阵列处理机是以资源重复途径开发。</p><p>1、向量的流失处理与向量流水处理机</p><ul><li>（1）虽然向量运算比标量运算更容易发挥流水线的效能，但如果处理方式选择不当也不行。选择使向量运算最能充分发挥出流水效能的处理方式，就是向量的流水处理要研究的问题。</li><li>（2）若向量的长度N太长，超出了向量寄存器组中寄存器的个数，可将向量分割成若干个组，使每组都能装得进向量寄存器组中。组内采用纵向方式处理，组间采用依次横向处理。</li><li>（3）一般可采取让多个流水线功能部件并行，流水线链接，加快条件语句和稀疏矩阵处理，加快向量的归约操作等方法来提高向量流水线处理的性能。</li></ul><h2 id="二、-阵列处理机的原理" tabindex="-1">二、 阵列处理机的原理 <a class="header-anchor" href="#二、-阵列处理机的原理" aria-label="Permalink to &quot;二、 阵列处理机的原理&quot;">​</a></h2><p>1、阵列处理机的构形和特点</p><ul><li>构形 <ul><li>两种构形，差别主要在于<code>存储器的组成方式</code>和<code>互连网络的作用</code>不同。</li><li>分布式存储器阵列处理机</li><li>中式共享存储器的阵列处理机</li></ul></li><li>特点 <ul><li>1）阵列处理机的单指令流多数据流处理方式和由它产生的特殊结构是以诸如有限差分、矩阵、信号处理、线性规划等一系列计算问题为背景发展起来的。</li><li>2）阵列处理机利用的是资源重复，而不是时间重叠；利用并行性中的同时性，而不是并发性。它的每个处理单元要同等地担负起各种运算功能，但其设备利用率却可能没有多个单功能流水线部件那样高。</li><li>3）阵列处理机主要是靠增大处理单元个数来提高运算速度，比起向量流水线处理机主要依靠缩短时钟周期来说， 速度提高的潜力要大得多。</li></ul></li></ul><h2 id="三、-simd-单指令流-多数据流-计算机的互连网络" tabindex="-1">三、 SIMD（单指令流/多数据流）计算机的互连网络 <a class="header-anchor" href="#三、-simd-单指令流-多数据流-计算机的互连网络" aria-label="Permalink to &quot;三、  SIMD（单指令流/多数据流）计算机的互连网络&quot;">​</a></h2><p>1、互联网络的设计目标及互联函数</p><ul><li>SIMD的互连网络的设计目标是： <ul><li>1）结构不要过分复杂，以降低成本；</li><li>2）互连要灵活，以满足算法和应用的需要；</li><li>3）处理单元间信息交换所需的传送步数要尽可能少，以提高速度性能；</li><li>4）能用规整单一的基本构建组合而成，或经多次通过或者经多级连接来实现复杂的互连，使模块性好，以便用VLSI实现，并满足可扩充性。</li></ul></li></ul><p>2、互联网络应抉择的几个问题</p><ul><li>1）操作方式</li><li>2）控制策略</li><li>3）交换方法</li><li>4）网络的拓扑结构</li></ul><p>3、接班的单级互联网络</p><ul><li>1）立方体单级网络</li><li>2）PM2I单级网络</li><li>3）混洗交换单级网络</li><li>4）蝶形单级网络</li></ul><p>4、基本的多级互联网络</p><ul><li>交互开关</li><li>控制方式</li><li>1）多级立方体网络</li><li>2）多级混洗交换网络</li><li>3）多级PM2网络</li></ul><p>5、全排列网络</p><ul><li>当实现两对或多对入端与出端之间的连接时， 都有可能因争用数据传送路径而发生冲突。 我们称具有这类性质的互连网络为阻塞式网络(Blocking Network)。 反之， 不具有这类性质的互连网络为<code>非阻塞式网络</code>，或称为<code>全排列网络</code>。</li></ul><h2 id="四、脉动阵列流水处理机" tabindex="-1">四、脉动阵列流水处理机 <a class="header-anchor" href="#四、脉动阵列流水处理机" aria-label="Permalink to &quot;四、脉动阵列流水处理机&quot;">​</a></h2><p>1、脉动阵列结构的原理</p><ul><li>脉动阵列结构是由一组处理单元（PE）构成的阵列。每个PE的内部结构相同，一般由一个加法/逻辑运算部件或加法/乘法运算部件再加上若干个锁存器构成，可完成少数基本的算术逻辑运算操作。</li><li>特点 <ul><li>1）结构简单、 规整， 模块化强；</li><li><ol start="2"><li>数据流和控制流的设计简单规整；</li></ol></li><li><ol start="3"><li>具有极高的计算并行性；</li></ol></li><li><ol start="4"><li>脉动阵列结构的构形与特定计算任务和算法密切相关；</li></ol></li></ul></li></ul><p>2、通用脉动阵列结构</p>',23),r=[t];function c(d,u,s,p,n,h){return i(),a("div",null,r)}const f=l(o,[["render",c]]);export{m as __pageData,f as default};
