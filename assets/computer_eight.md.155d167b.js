import{_ as l,o as i,c as e,O as a}from"./chunks/framework.0bc17605.js";const m=JSON.parse('{"title":"第八章 数据流计算机和规约机","description":"","frontmatter":{},"headers":[],"relativePath":"computer/eight.md","filePath":"computer/eight.md","lastUpdated":1663685784000}'),t={name:"computer/eight.md"},o=a('<h1 id="第八章-数据流计算机和规约机" tabindex="-1">第八章 数据流计算机和规约机 <a class="header-anchor" href="#第八章-数据流计算机和规约机" aria-label="Permalink to &quot;第八章 数据流计算机和规约机&quot;">​</a></h1><h2 id="一、-数据流计算机" tabindex="-1">一、 数据流计算机 <a class="header-anchor" href="#一、-数据流计算机" aria-label="Permalink to &quot;一、 数据流计算机&quot;">​</a></h2><p>1、数据驱动的概念★</p><ul><li>冯诺依曼型计算机的特点是： <ul><li>在程序计数器集中控制下，顺序地执行指令，因此，它是以控制流方式工作的。</li><li>由于本质上仍是指令顺序执行，这很难最大限度地发掘出计算的并行性。</li></ul></li><li>开发并行性的另一个途径是：改用<code>数据驱动</code>的数据流方式来工作。</li><li><code>数据驱动</code>是指只要一条或一组指令所要求的操作数全部准备就绪，就可以立即激发相应的指令或指令组执行。执行结果的输出将送往等待这一数据的下一条或下一组指令。如果其中一些指令所需用到的数据全部准备就绪，就可以被激发执行。 <ul><li>1）在数据流计算机上，不需要程序计数器；</li><li>2）指令的执行基本是无序的，完全受数据流的驱动；</li><li>3）部分有序的操作也不是由程序员指定的，受数据相关的制约；</li></ul></li></ul><p>2、数据流程序图和语言</p><ul><li>数据流程序图的基本结构</li></ul><h2 id="二、规约机" tabindex="-1">二、规约机 <a class="header-anchor" href="#二、规约机" aria-label="Permalink to &quot;二、规约机&quot;">​</a></h2><p>1、定义</p><ul><li>1）基于数据流的计算模型，归约机是需求驱动，执行的操作序列取决于对数据的需求，对数据的需求又来源于函数式车呢工序设计语言对表达式的归约。</li><li>2）函数式语言是由所有函数表达式的集合、所有目标（也是表达式）的集合及所有由函数表达式到目标的函数集合三部分组成</li><li>3）如果给出了一个属函数表达式集合中的复杂函数的表达式，利用提供的函数集合中的子函数经过有限次归约代换之后，总可以得到所希望的结果， 即由常量构成的目标。函数表达式指的是函数之间的映射。</li><li>4）函数表达式的每一次归约，就是一次函数的应用，或是一个字表达式的代换。</li></ul><p>2、特点</p><ul><li>1）归约机应当面向函数式语言， 或以函数式语言为机器语言的非Neumann型机器。</li><li>2）具有大容量的物理存贮器并采用有虚存容量很大的虚拟存贮器系统， 具备高效的动态存贮分配和管理的软硬件支持， 满足归约机对动态存贮分配及所需存贮空间较大的要求。</li><li>3）处理部分应当是一种含有多个处理器或多个处理机并行的结构形式，以发挥函数式程序并行处理的特长。</li><li>4）采用适合于函数式程序运行的多处理器(机)互连的机构。</li><li>5）为了减少进程调度及进程间通信的开销，尽可能把运行进程的结点机安排成紧靠该进程所需用的数据，并使运行时需相互通信的进程所占用的处理机也靠近。</li></ul>',11),r=[o];function c(n,d,s,u,_,h){return i(),e("div",null,r)}const f=l(t,[["render",c]]);export{m as __pageData,f as default};
