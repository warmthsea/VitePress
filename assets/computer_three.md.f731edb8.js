import{_ as e}from"./chunks/learn_1.79a9ca9d.js";import{_ as o,o as l,c,O as d}from"./chunks/framework.0bc17605.js";const P=JSON.parse('{"title":"第三章 存储、中断、总线与I/O系统","description":"","frontmatter":{},"headers":[],"relativePath":"computer/three.md","filePath":"computer/three.md","lastUpdated":1661236768000}'),i={name:"computer/three.md"},a=d('<h1 id="第三章-存储、中断、总线与i-o系统" tabindex="-1">第三章 存储、中断、总线与I/O系统 <a class="header-anchor" href="#第三章-存储、中断、总线与i-o系统" aria-label="Permalink to &quot;第三章 存储、中断、总线与I/O系统&quot;">​</a></h1><h2 id="一、-存储系统的基本要求和并行主存系统" tabindex="-1">一、 存储系统的基本要求和并行主存系统 <a class="header-anchor" href="#一、-存储系统的基本要求和并行主存系统" aria-label="Permalink to &quot;一、 存储系统的基本要求和并行主存系统&quot;">​</a></h2><p>1、存储系统的基本要求</p><ul><li><code>大容量</code>、<code>高速度</code>和<code>低价格</code></li><li>单一工艺的存储器无法同时满足,为了弥补CPU与存储器在速度上的差异，一条途径是在组成上引入并行和重叠技术，构成并行主存系统，但单靠这一种方式效果是有限。</li></ul><p>2、并行主存系统</p><ul><li>单体多字存储器： Bm = W×4/TM</li><li>多体单字交叉存储器： <ul><li>能并行读出多个 CPU 字的单体多字和多体单字、多体多字的交叉访问主存系统统称为并行主存系统。</li></ul></li></ul><h2 id="二、-中断系统" tabindex="-1">二、 中断系统 <a class="header-anchor" href="#二、-中断系统" aria-label="Permalink to &quot;二、 中断系统&quot;">​</a></h2><p>CPU中止正在执行的程序，转去处理随机提出的请求，待处理完后，再回到原先被打断的程序继续恢复执行的过程称为<code>中断</code>。 中断分为<code>内部中断</code>、<code>外部中断</code>和<code>软件中断</code>三类。</p><p>1、中断的分类和分级</p><ul><li>引起中断的各种事件称为<code>中断源</code>。</li><li>中断源向中断系统发出请求中断的申请，称为<code>中断请求</code>。</li><li>所谓<code>中断响应</code>就是允许其中断CPU现行程序的运行，转去对该请求进行预处理，包括保存好断点现场，调出有关处理该中断的中断处理程序，准备运行。</li><li><strong>中断的分类</strong>★ <ul><li>优化中断处理：<code>对每一类给定一个中断处理程序入口</code></li><li>以IBM 370为例，它把中断分成<code>机器校验（1级）</code>、<code>管理程序调用（2级）</code>、<code>程序性（2级）</code>、<code>外部</code>、<code>输入/输出</code>和<code>重新启动</code>6 类。</li></ul></li></ul><p>2、中断的响应次序与处理次序★</p><ul><li>基本规则 <ul><li>一个中断只能被比它高等级的中断打断</li></ul></li></ul><p>3、中断系统的软、硬件功能分配</p><ul><li>中断系统的功能包括<code>中断请求的保存和清除</code>、<code>优先级的确定</code>、<code>中断断点及现场的保存</code>、<code>对中断请求的分析和处理以及中断返回</code>等，这些全是由中断响应硬件和中断处理程序共同完成的。因此，中断系统的软、硬件功能分配实质上就是<code>中断处理程序软件</code>和<code>中断响应硬件</code>的功能分配。</li></ul><p>1、总线的分类</p><ul><li>总线的定义：用于互连计算机、CPU、存储器、I/O接口及外围设备间的信息传送通路。</li><li>总线的分类 ★ <ul><li>（1）就允许信息传送的方向来说，总线可以有单向传输和双向传输两种。 双向传输又有半双向和全双向的不同。</li><li>（2）总线按其用法可以分成<code>专用</code>的和<code>非专用</code>的。</li><li>只连接一对物理部件的总线称为专用总线。如果N个部件用双向专用总线在所有可能路径都互连，则需<code>N×(N -1)/2</code>组总线。</li></ul></li></ul><p>2、总线的控制方式★</p><ul><li>（1）集中控制与分布式控制</li><li>（2）集中控制的方式 <ul><li>集中控制方式可分为<code>集中式串行链接</code>、<code>集中式定时查询</code>和<code>集中式独立请求</code>3种。</li></ul></li></ul><p>3、总线的通信技术</p><ul><li>同步通信和异步通信</li></ul><p>4、数据宽度和总线线数</p><ul><li>数据宽度指的是<code>I/O设备取得I/O总线使用权后所传送数据的总量</code>。传送完后就释放总线，重新开始分配总线。所以，它不同于<code>前面讲过的数据通路宽度</code>。</li><li><code>数据通路宽度</code>指的是数据传送的物理宽度，即一个时钟周期所传送的信息量， 它直接取决于数据总线的线数。</li></ul><h2 id="i-o系统" tabindex="-1">I/O系统 <a class="header-anchor" href="#i-o系统" aria-label="Permalink to &quot;I/O系统&quot;">​</a></h2><p>1、 概述</p><ul><li>（1）I/O系统包括输入/输出设备、设备控制器及与输入/输出操作有关的软、硬件。</li><li>（2）输入/输出系统的发展经历了3个阶段，对应3种方式，即<code>程序控制I/O方式</code>、<code>直接存储器访问（DMA）方式</code>以及<code>I/O处理机</code>方式。</li><li>对于<code>I/O处理机</code>方式，又分为<code>通道（Channel）</code>方式和<code>外围处理机（PPU）</code>方式。</li></ul><p>2、通道处理机的工作原理和流量设计</p><ul><li><img src="'+e+'"></li><li>2、通道流量的设计 ★ <ul><li>（1）<code>通道流量</code>是指通道在数据传送期内，单位时间内传送的字节数。数据传送期内选择一次设备的时间为TS，传送一个字节的时间为TD。</li></ul></li></ul>',27),t=[a];function r(u,p,s,n,h,_){return l(),c("div",null,t)}const O=o(i,[["render",r]]);export{P as __pageData,O as default};
